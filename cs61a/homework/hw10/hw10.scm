(define (accumulate combiner start n term)
  (cond ((= n 1) (combiner start (term n)))
        (else (accumulate combiner (combiner start (term n)) (- n 1) term))
  )
)

(define (accumulate-tail combiner start n term)
  (if (= n 1) (combiner start (term n))
              (accumulate combiner (combiner start (term n)) (- n 1) term)
  )
)

(define (partial-sums stream)
  (define (helper n s)
    (cond ((null? s) nil)
          (else (cons-stream (+ n (car s)) (helper (+ n (car s)) (cdr-stream s))))
    )
  )
  (helper 0 stream)
)

(define (rle s)
  (define (helper n s)
    (cond ((null? s) nil)
          ((null? (cdr-stream s)) (cons-stream (cons (car s) (cons n nil)) nil))
          ((equal? (car s) (car (cdr-stream s))) (helper (+ n 1) (cdr-stream s)))
          (else (cons-stream (cons (car s) (cons n nil)) (helper 1 (cdr-stream s))))
    )
  )
  (helper 1 s)
)
